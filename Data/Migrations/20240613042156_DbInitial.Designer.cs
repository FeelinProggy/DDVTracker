// <auto-generated />
using System;
using DDVTracker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DDVTracker.Data.Migrations
{
    [DbContext(typeof(DreamlightDbContext))]
    [Migration("20240613042156_DbInitial")]
    partial class DbInitial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DDVTracker.Models.Character", b =>
                {
                    b.Property<int>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CharacterId"));

                    b.Property<string>("AcquiredBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AcquiredFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssignedSkill")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("CharacterImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("CharacterLevel")
                        .HasColumnType("int");

                    b.Property<string>("CharacterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FavoriteThing1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FavoriteThing2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FavoriteThing3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GameVersionId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("isUnlocked")
                        .HasColumnType("bit");

                    b.HasKey("CharacterId");

                    b.HasIndex("GameVersionId");

                    b.ToTable("Characters");

                    b.HasData(
                        new
                        {
                            CharacterId = 1,
                            AcquiredBy = "Realm",
                            AcquiredFrom = "Frozen Realm",
                            CharacterName = "Anna",
                            GameVersionId = 1,
                            Notes = "Unlock Realm"
                        },
                        new
                        {
                            CharacterId = 2,
                            AcquiredBy = "Quest",
                            AcquiredFrom = "Goofy",
                            CharacterName = "Ariel",
                            GameVersionId = 1,
                            Notes = "The Mysterious Wreck"
                        },
                        new
                        {
                            CharacterId = 3,
                            AcquiredBy = "Realm",
                            AcquiredFrom = "Beauty and the Beast Realm",
                            CharacterName = "Belle",
                            GameVersionId = 1,
                            Notes = "Unlock Realm"
                        },
                        new
                        {
                            CharacterId = 4,
                            AcquiredBy = "Realm",
                            AcquiredFrom = "Toy Story Realm",
                            CharacterName = "Buzz Lightyear",
                            GameVersionId = 1,
                            Notes = "Unlock Realm"
                        },
                        new
                        {
                            CharacterId = 5,
                            AcquiredBy = "Quest",
                            AcquiredFrom = "Mickey Mouse",
                            CharacterName = "Daisy",
                            GameVersionId = 1,
                            Notes = "You Have Mail!"
                        },
                        new
                        {
                            CharacterId = 6,
                            AcquiredBy = "Quest",
                            AcquiredFrom = "Kristoff",
                            CharacterName = "Donald Duck",
                            GameVersionId = 1,
                            Notes = "Story - Lost in the Dark Grove"
                        },
                        new
                        {
                            CharacterId = 7,
                            AcquiredBy = "Realm",
                            AcquiredFrom = "Frozen Realm",
                            CharacterName = "Elsa",
                            GameVersionId = 1,
                            Notes = "Complete initial realm  quest"
                        },
                        new
                        {
                            CharacterId = 8,
                            AcquiredBy = "Quest",
                            AcquiredFrom = "Peaceful Meadow",
                            CharacterName = "Goofy",
                            GameVersionId = 1,
                            Notes = "The Royal Tools"
                        },
                        new
                        {
                            CharacterId = 9,
                            AcquiredBy = "Quest",
                            AcquiredFrom = "ForgottenLands",
                            CharacterName = "Jack Skellington",
                            GameVersionId = 1,
                            Notes = "After Fairy Godmother's Fire Alarm quest, search for Matryoshka Dolls to trigger quest."
                        },
                        new
                        {
                            CharacterId = 10,
                            AcquiredBy = "Quest",
                            AcquiredFrom = "Forest of Valor",
                            CharacterName = "Kristoff",
                            GameVersionId = 1,
                            Notes = "Unlock Biome"
                        },
                        new
                        {
                            CharacterId = 11,
                            AcquiredBy = "Realm",
                            AcquiredFrom = "Moana Realm",
                            CharacterName = "Maui",
                            GameVersionId = 1,
                            Notes = "Complete initial realm  quest"
                        },
                        new
                        {
                            CharacterId = 12,
                            AcquiredFrom = "The Plaza",
                            CharacterName = "Merlin",
                            GameVersionId = 1,
                            Notes = "Unlock Realm"
                        },
                        new
                        {
                            CharacterId = 13,
                            AcquiredFrom = "The Plaza",
                            CharacterName = "Mickey Mouse",
                            GameVersionId = 1,
                            Notes = "Unlock Realm"
                        },
                        new
                        {
                            CharacterId = 14,
                            AcquiredBy = "Realm",
                            AcquiredFrom = "Monsters Inc. Realm	",
                            CharacterName = "Mike Wazowski",
                            GameVersionId = 1,
                            Notes = "Complete initial realm  quest"
                        },
                        new
                        {
                            CharacterId = 15,
                            AcquiredBy = "Quest",
                            AcquiredFrom = "Mickey Mouse",
                            CharacterName = "Minnie Mouse",
                            GameVersionId = 1,
                            Notes = "Memory Magnification"
                        },
                        new
                        {
                            CharacterId = 16,
                            AcquiredBy = "Quest",
                            AcquiredFrom = "Merlin",
                            CharacterName = "Mirabel",
                            GameVersionId = 1,
                            Notes = "The Golden Dorknob"
                        },
                        new
                        {
                            CharacterId = 17,
                            AcquiredBy = "Realm",
                            AcquiredFrom = "Moana Realm",
                            CharacterName = "Moana",
                            GameVersionId = 1,
                            Notes = "Unlock Realm"
                        },
                        new
                        {
                            CharacterId = 18,
                            AcquiredBy = "Quest",
                            AcquiredFrom = "Glade of Trust",
                            CharacterName = "Mother Gothel",
                            GameVersionId = 1,
                            Notes = "Story - The Curse"
                        },
                        new
                        {
                            CharacterId = 19,
                            AcquiredBy = "Realm",
                            AcquiredFrom = "The Lion King Realm",
                            CharacterName = "Nala",
                            GameVersionId = 1,
                            Notes = "Unlock Realm"
                        },
                        new
                        {
                            CharacterId = 20,
                            AcquiredBy = "Quest",
                            AcquiredFrom = "Frosted Heights",
                            CharacterName = "Olaf",
                            GameVersionId = 1,
                            Notes = "Story - The Great Blizzard"
                        },
                        new
                        {
                            CharacterId = 21,
                            AcquiredBy = "Quest	",
                            AcquiredFrom = "Ursala",
                            CharacterName = "Prince Eric",
                            GameVersionId = 1,
                            Notes = "After Ariel and Ursala reach level 10"
                        },
                        new
                        {
                            CharacterId = 22,
                            AcquiredBy = "Realm",
                            AcquiredFrom = "Ratatouille Realm",
                            CharacterName = "Remy",
                            GameVersionId = 1,
                            Notes = "Unlock Realm"
                        },
                        new
                        {
                            CharacterId = 23,
                            AcquiredBy = "Quest",
                            AcquiredFrom = "Sunlit Plateau",
                            CharacterName = "Scar",
                            GameVersionId = 1,
                            Notes = "After The Curse in completed."
                        },
                        new
                        {
                            CharacterId = 24,
                            AcquiredFrom = "The Plaza",
                            CharacterName = "Scrooge McDuck",
                            GameVersionId = 1,
                            Notes = "Unlock Realm"
                        },
                        new
                        {
                            CharacterId = 25,
                            AcquiredBy = "Realm",
                            AcquiredFrom = "The Lion King Realm",
                            CharacterName = "Simba",
                            GameVersionId = 1,
                            Notes = "Complete initial realm  quest"
                        },
                        new
                        {
                            CharacterId = 26,
                            AcquiredBy = "Quest",
                            AcquiredFrom = "Donald Duck",
                            CharacterName = "Stitch",
                            GameVersionId = 1,
                            Notes = "The Mystery of the Stolen Socks"
                        },
                        new
                        {
                            CharacterId = 27,
                            AcquiredBy = "Realm",
                            AcquiredFrom = "Monsters Inc. Realm",
                            CharacterName = "Sulley",
                            GameVersionId = 1,
                            Notes = "Unlock Realm"
                        },
                        new
                        {
                            CharacterId = 28,
                            AcquiredBy = "Realm",
                            AcquiredFrom = "Beauty and the Beast Realm",
                            CharacterName = "The Beast",
                            GameVersionId = 1,
                            Notes = "Complete initial realm  quest"
                        },
                        new
                        {
                            CharacterId = 29,
                            AcquiredBy = "Quest	",
                            AcquiredFrom = "	ForgottenLands",
                            CharacterName = "The Fairy Godmother",
                            GameVersionId = 1,
                            Notes = " After repairing the 6 Pillars"
                        },
                        new
                        {
                            CharacterId = 30,
                            AcquiredBy = "Quest",
                            AcquiredFrom = "Dazzle Beach",
                            CharacterName = "Ursula",
                            GameVersionId = 1,
                            Notes = "Story - With Great Power"
                        },
                        new
                        {
                            CharacterId = 31,
                            AcquiredBy = "Quest",
                            AcquiredFrom = "Scrooge",
                            CharacterName = "Vanellope",
                            GameVersionId = 1,
                            Notes = " The Haunting of Dreamlight Valley"
                        },
                        new
                        {
                            CharacterId = 32,
                            AcquiredBy = "Realm",
                            AcquiredFrom = "WALL-E Realm",
                            CharacterName = "WALL-E",
                            GameVersionId = 1,
                            Notes = "Unlock Realm"
                        },
                        new
                        {
                            CharacterId = 33,
                            AcquiredBy = "Realm",
                            AcquiredFrom = "Toy Story Realm",
                            CharacterName = "Woody",
                            GameVersionId = 1,
                            Notes = "Complete initial realm  quest"
                        },
                        new
                        {
                            CharacterId = 34,
                            AcquiredBy = "Quest",
                            AcquiredFrom = "Ancient's Landing",
                            CharacterName = "EVE",
                            GameVersionId = 2,
                            Notes = "After receiving pickaxe upgrade	"
                        },
                        new
                        {
                            CharacterId = 35,
                            AcquiredBy = "Quest",
                            AcquiredFrom = "Glittering Dunes",
                            CharacterName = "Gaston",
                            GameVersionId = 2,
                            Notes = "Unlock Biome"
                        },
                        new
                        {
                            CharacterId = 36,
                            AcquiredBy = "Quest",
                            AcquiredFrom = "Ancient's Landing",
                            CharacterName = "Oswald",
                            GameVersionId = 2,
                            Notes = " The Spark of Imagination."
                        },
                        new
                        {
                            CharacterId = 37,
                            AcquiredBy = "Quest",
                            AcquiredFrom = "Wild Tangle",
                            CharacterName = "Rapunzel",
                            GameVersionId = 2,
                            Notes = "Unlock Biome"
                        });
                });

            modelBuilder.Entity("DDVTracker.Models.Fish", b =>
                {
                    b.Property<int>("FishId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FishId"));

                    b.Property<int?>("Energy")
                        .HasColumnType("int");

                    b.Property<byte[]>("FishImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GameVersionId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RippleColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SellsFor")
                        .HasColumnType("int");

                    b.HasKey("FishId");

                    b.HasIndex("GameVersionId");

                    b.ToTable("Fish");

                    b.HasData(
                        new
                        {
                            FishId = 1,
                            Energy = 2000,
                            FishName = "Anglerfish",
                            GameVersionId = 1,
                            RippleColor = "Orange",
                            SellsFor = 1500
                        },
                        new
                        {
                            FishId = 2,
                            Energy = 150,
                            FishName = "Bass",
                            GameVersionId = 1,
                            Notes = "Could be outside of Ripples",
                            RippleColor = "White",
                            SellsFor = 25
                        },
                        new
                        {
                            FishId = 3,
                            Energy = 1300,
                            FishName = "Bream",
                            GameVersionId = 1,
                            RippleColor = "Blue",
                            SellsFor = 280
                        },
                        new
                        {
                            FishId = 4,
                            Energy = 800,
                            FishName = "Carp",
                            GameVersionId = 1,
                            Notes = "Can be White",
                            RippleColor = "Blue",
                            SellsFor = 400
                        },
                        new
                        {
                            FishId = 5,
                            Energy = 1200,
                            FishName = "Catfish",
                            GameVersionId = 1,
                            RippleColor = "Orange",
                            SellsFor = 550
                        },
                        new
                        {
                            FishId = 6,
                            Energy = 150,
                            FishName = "Cod",
                            GameVersionId = 1,
                            Notes = "Could be outside of Ripples",
                            RippleColor = "White",
                            SellsFor = 35
                        },
                        new
                        {
                            FishId = 7,
                            Energy = 1550,
                            FishName = "Crab",
                            GameVersionId = 1,
                            Notes = "Can be White",
                            RippleColor = "Blue",
                            SellsFor = 600
                        },
                        new
                        {
                            FishId = 8,
                            Energy = 1700,
                            FishName = "Fugu",
                            GameVersionId = 1,
                            Notes = "Requires rain",
                            RippleColor = "Orange",
                            SellsFor = 900
                        },
                        new
                        {
                            FishId = 9,
                            Energy = 1000,
                            FishName = "Here and There Fish",
                            GameVersionId = 1,
                            Notes = "Also outside of Ripples. Requires morning (6-10am) or evening (6-10pm) after completing Menu Icon Quests.png Here and There and Back Again",
                            RippleColor = "	White",
                            SellsFor = 2000
                        },
                        new
                        {
                            FishId = 10,
                            Energy = 250,
                            FishName = "Herring",
                            GameVersionId = 1,
                            RippleColor = "White",
                            SellsFor = 65
                        },
                        new
                        {
                            FishId = 11,
                            Energy = 800,
                            FishName = "Kingfish",
                            GameVersionId = 1,
                            Notes = "Requires night (6pm-5am)",
                            RippleColor = "Blue",
                            SellsFor = 450
                        },
                        new
                        {
                            FishId = 12,
                            Energy = 1300,
                            FishName = "Lancetfish",
                            GameVersionId = 1,
                            RippleColor = "Blue",
                            SellsFor = 650
                        },
                        new
                        {
                            FishId = 13,
                            Energy = 1600,
                            FishName = "Lobster",
                            GameVersionId = 1,
                            RippleColor = "Orange",
                            SellsFor = 950
                        },
                        new
                        {
                            FishId = 14,
                            Energy = 400,
                            FishName = "Perch",
                            GameVersionId = 1,
                            Notes = "Can be White",
                            RippleColor = "Blue",
                            SellsFor = 80
                        },
                        new
                        {
                            FishId = 15,
                            Energy = 1500,
                            FishName = "Pike",
                            GameVersionId = 1,
                            RippleColor = "Orange",
                            SellsFor = 800
                        },
                        new
                        {
                            FishId = 16,
                            Energy = 300,
                            FishName = "Rainbow Trout",
                            GameVersionId = 1,
                            RippleColor = "White",
                            SellsFor = 50
                        },
                        new
                        {
                            FishId = 17,
                            Energy = 500,
                            FishName = "Salmon",
                            GameVersionId = 1,
                            Notes = "Can be blue",
                            RippleColor = "White",
                            SellsFor = 150
                        },
                        new
                        {
                            FishId = 18,
                            Energy = 25,
                            FishName = "Seaweed",
                            GameVersionId = 1,
                            SellsFor = 20
                        },
                        new
                        {
                            FishId = 19,
                            Energy = 750,
                            FishName = "Shrimp",
                            GameVersionId = 1,
                            Notes = "Can be White",
                            RippleColor = "Blue",
                            SellsFor = 300
                        },
                        new
                        {
                            FishId = 20,
                            Energy = 500,
                            FishName = "Sole",
                            GameVersionId = 1,
                            Notes = "Can be blue",
                            RippleColor = "White",
                            SellsFor = 200
                        },
                        new
                        {
                            FishId = 21,
                            Energy = 1000,
                            FishName = "Squid",
                            GameVersionId = 1,
                            Notes = "Can be White",
                            RippleColor = "Blue",
                            SellsFor = 500
                        },
                        new
                        {
                            FishId = 22,
                            Energy = 1500,
                            FishName = "Swordfish",
                            GameVersionId = 1,
                            RippleColor = "Orange",
                            SellsFor = 700
                        },
                        new
                        {
                            FishId = 23,
                            Energy = 1150,
                            FishName = "Tilapia",
                            GameVersionId = 1,
                            RippleColor = "Blue",
                            SellsFor = 600
                        },
                        new
                        {
                            FishId = 24,
                            Energy = 350,
                            FishName = "Tuna",
                            GameVersionId = 1,
                            Notes = "Can be blue",
                            RippleColor = "White",
                            SellsFor = 95
                        },
                        new
                        {
                            FishId = 25,
                            Energy = 1700,
                            FishName = "Walleye",
                            GameVersionId = 1,
                            RippleColor = "Orange",
                            SellsFor = 1100
                        },
                        new
                        {
                            FishId = 26,
                            Energy = 1800,
                            FishName = "White Sturgeon",
                            GameVersionId = 1,
                            RippleColor = "Orange",
                            SellsFor = 1250
                        },
                        new
                        {
                            FishId = 27,
                            Energy = 1650,
                            FishName = "Brilliant Blue Starfish",
                            GameVersionId = 2,
                            RippleColor = "Orange",
                            SellsFor = 875
                        },
                        new
                        {
                            FishId = 28,
                            Energy = 1100,
                            FishName = "Dunebopper",
                            GameVersionId = 2,
                            RippleColor = "Blue",
                            SellsFor = 550
                        },
                        new
                        {
                            FishId = 29,
                            Energy = 1200,
                            FishName = "Electric Eel",
                            GameVersionId = 2,
                            RippleColor = "Orange",
                            SellsFor = 1025
                        },
                        new
                        {
                            FishId = 30,
                            Energy = 700,
                            FishName = "Octopus",
                            GameVersionId = 2,
                            Notes = "Can be White",
                            RippleColor = "Blue",
                            SellsFor = 290
                        },
                        new
                        {
                            FishId = 31,
                            Energy = 1900,
                            FishName = "Piranha",
                            GameVersionId = 2,
                            RippleColor = "Orange",
                            SellsFor = 1300
                        },
                        new
                        {
                            FishId = 32,
                            Energy = 1250,
                            FishName = "Pirarucu",
                            GameVersionId = 2,
                            RippleColor = "Blue",
                            SellsFor = 625
                        },
                        new
                        {
                            FishId = 33,
                            Energy = 1500,
                            FishName = "Pretty Pink Starfish",
                            GameVersionId = 2,
                            RippleColor = "Orange",
                            SellsFor = 875
                        },
                        new
                        {
                            FishId = 34,
                            Energy = 1600,
                            FishName = "Prisma Shrimp",
                            GameVersionId = 2,
                            RippleColor = "Orange",
                            SellsFor = 1100
                        },
                        new
                        {
                            FishId = 35,
                            Energy = 1350,
                            FishName = "Robot Fish",
                            GameVersionId = 2,
                            RippleColor = "Orange",
                            SellsFor = 625
                        },
                        new
                        {
                            FishId = 36,
                            Energy = 150,
                            FishName = "Sand Fish",
                            GameVersionId = 2,
                            Notes = "Could be outside of Ripples",
                            RippleColor = "White",
                            SellsFor = 30
                        },
                        new
                        {
                            FishId = 37,
                            Energy = 1650,
                            FishName = "Sand Worm",
                            GameVersionId = 2,
                            RippleColor = "Orange",
                            SellsFor = 800
                        },
                        new
                        {
                            FishId = 38,
                            Energy = 900,
                            FishName = "Scorpion",
                            GameVersionId = 2,
                            RippleColor = "Blue",
                            SellsFor = 425
                        },
                        new
                        {
                            FishId = 39,
                            Energy = 800,
                            FishName = "Sea Snail",
                            GameVersionId = 2,
                            Notes = "Can be White",
                            RippleColor = "Blue",
                            SellsFor = 250
                        },
                        new
                        {
                            FishId = 40,
                            Energy = 300,
                            FishName = "Shad",
                            GameVersionId = 2,
                            RippleColor = "White",
                            SellsFor = 60
                        },
                        new
                        {
                            FishId = 41,
                            Energy = 500,
                            FishName = "Skeleton Fish",
                            GameVersionId = 2,
                            Notes = "Can be blue",
                            RippleColor = "White",
                            SellsFor = 100
                        });
                });

            modelBuilder.Entity("DDVTracker.Models.FishLocation", b =>
                {
                    b.Property<int>("FishLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FishLocationId"));

                    b.Property<int>("FishId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.HasKey("FishLocationId");

                    b.HasIndex("FishId");

                    b.HasIndex("LocationId");

                    b.ToTable("FishLocations");

                    b.HasData(
                        new
                        {
                            FishLocationId = 1,
                            FishId = 1,
                            LocationId = 8
                        },
                        new
                        {
                            FishLocationId = 2,
                            FishId = 2,
                            LocationId = 4
                        },
                        new
                        {
                            FishLocationId = 3,
                            FishId = 2,
                            LocationId = 7
                        },
                        new
                        {
                            FishLocationId = 4,
                            FishId = 2,
                            LocationId = 2
                        },
                        new
                        {
                            FishLocationId = 5,
                            FishId = 2,
                            LocationId = 6
                        },
                        new
                        {
                            FishLocationId = 6,
                            FishId = 2,
                            LocationId = 17
                        },
                        new
                        {
                            FishLocationId = 7,
                            FishId = 2,
                            LocationId = 18
                        },
                        new
                        {
                            FishLocationId = 8,
                            FishId = 3,
                            LocationId = 2
                        },
                        new
                        {
                            FishLocationId = 9,
                            FishId = 27,
                            LocationId = 18
                        },
                        new
                        {
                            FishLocationId = 10,
                            FishId = 4,
                            LocationId = 4
                        },
                        new
                        {
                            FishLocationId = 11,
                            FishId = 4,
                            LocationId = 6
                        },
                        new
                        {
                            FishLocationId = 12,
                            FishId = 5,
                            LocationId = 2
                        },
                        new
                        {
                            FishLocationId = 13,
                            FishId = 6,
                            LocationId = 3
                        },
                        new
                        {
                            FishLocationId = 14,
                            FishId = 6,
                            LocationId = 8
                        },
                        new
                        {
                            FishLocationId = 15,
                            FishId = 6,
                            LocationId = 5
                        },
                        new
                        {
                            FishLocationId = 16,
                            FishId = 6,
                            LocationId = 12
                        },
                        new
                        {
                            FishLocationId = 17,
                            FishId = 6,
                            LocationId = 13
                        },
                        new
                        {
                            FishLocationId = 18,
                            FishId = 7,
                            LocationId = 7
                        },
                        new
                        {
                            FishLocationId = 19,
                            FishId = 28,
                            LocationId = 18
                        },
                        new
                        {
                            FishLocationId = 20,
                            FishId = 29,
                            LocationId = 20
                        },
                        new
                        {
                            FishLocationId = 21,
                            FishId = 29,
                            LocationId = 22
                        },
                        new
                        {
                            FishLocationId = 22,
                            FishId = 8,
                            LocationId = 3
                        },
                        new
                        {
                            FishLocationId = 23,
                            FishId = 9,
                            LocationId = 3
                        },
                        new
                        {
                            FishLocationId = 24,
                            FishId = 9,
                            LocationId = 4
                        },
                        new
                        {
                            FishLocationId = 25,
                            FishId = 9,
                            LocationId = 8
                        },
                        new
                        {
                            FishLocationId = 26,
                            FishId = 9,
                            LocationId = 7
                        },
                        new
                        {
                            FishLocationId = 27,
                            FishId = 9,
                            LocationId = 5
                        },
                        new
                        {
                            FishLocationId = 28,
                            FishId = 9,
                            LocationId = 2
                        },
                        new
                        {
                            FishLocationId = 29,
                            FishId = 9,
                            LocationId = 6
                        },
                        new
                        {
                            FishLocationId = 30,
                            FishId = 10,
                            LocationId = 3
                        },
                        new
                        {
                            FishLocationId = 31,
                            FishId = 10,
                            LocationId = 5
                        },
                        new
                        {
                            FishLocationId = 32,
                            FishId = 11,
                            LocationId = 3
                        },
                        new
                        {
                            FishLocationId = 33,
                            FishId = 12,
                            LocationId = 8
                        },
                        new
                        {
                            FishLocationId = 34,
                            FishId = 13,
                            LocationId = 5
                        },
                        new
                        {
                            FishLocationId = 35,
                            FishId = 30,
                            LocationId = 12
                        },
                        new
                        {
                            FishLocationId = 36,
                            FishId = 30,
                            LocationId = 13
                        },
                        new
                        {
                            FishLocationId = 37,
                            FishId = 14,
                            LocationId = 4
                        },
                        new
                        {
                            FishLocationId = 38,
                            FishId = 14,
                            LocationId = 6
                        },
                        new
                        {
                            FishLocationId = 39,
                            FishId = 14,
                            LocationId = 21
                        },
                        new
                        {
                            FishLocationId = 40,
                            FishId = 14,
                            LocationId = 23
                        },
                        new
                        {
                            FishLocationId = 41,
                            FishId = 15,
                            LocationId = 4
                        },
                        new
                        {
                            FishLocationId = 42,
                            FishId = 31,
                            LocationId = 23
                        },
                        new
                        {
                            FishLocationId = 43,
                            FishId = 31,
                            LocationId = 20
                        },
                        new
                        {
                            FishLocationId = 44,
                            FishId = 31,
                            LocationId = 21
                        },
                        new
                        {
                            FishLocationId = 45,
                            FishId = 31,
                            LocationId = 23
                        },
                        new
                        {
                            FishLocationId = 46,
                            FishId = 31,
                            LocationId = 22
                        },
                        new
                        {
                            FishLocationId = 47,
                            FishId = 33,
                            LocationId = 18
                        },
                        new
                        {
                            FishLocationId = 48,
                            FishId = 34,
                            LocationId = 21
                        },
                        new
                        {
                            FishLocationId = 49,
                            FishId = 16,
                            LocationId = 4
                        },
                        new
                        {
                            FishLocationId = 50,
                            FishId = 16,
                            LocationId = 2
                        },
                        new
                        {
                            FishLocationId = 51,
                            FishId = 35,
                            LocationId = 12
                        },
                        new
                        {
                            FishLocationId = 52,
                            FishId = 35,
                            LocationId = 13
                        },
                        new
                        {
                            FishLocationId = 53,
                            FishId = 17,
                            LocationId = 7
                        },
                        new
                        {
                            FishLocationId = 54,
                            FishId = 17,
                            LocationId = 6
                        },
                        new
                        {
                            FishLocationId = 55,
                            FishId = 17,
                            LocationId = 20
                        },
                        new
                        {
                            FishLocationId = 56,
                            FishId = 17,
                            LocationId = 22
                        },
                        new
                        {
                            FishLocationId = 57,
                            FishId = 36,
                            LocationId = 19
                        },
                        new
                        {
                            FishLocationId = 58,
                            FishId = 36,
                            LocationId = 16
                        },
                        new
                        {
                            FishLocationId = 59,
                            FishId = 36,
                            LocationId = 17
                        },
                        new
                        {
                            FishLocationId = 60,
                            FishId = 37,
                            LocationId = 19
                        },
                        new
                        {
                            FishLocationId = 61,
                            FishId = 37,
                            LocationId = 16
                        },
                        new
                        {
                            FishLocationId = 62,
                            FishId = 37,
                            LocationId = 17
                        },
                        new
                        {
                            FishLocationId = 63,
                            FishId = 38,
                            LocationId = 19
                        },
                        new
                        {
                            FishLocationId = 64,
                            FishId = 38,
                            LocationId = 16
                        },
                        new
                        {
                            FishLocationId = 65,
                            FishId = 38,
                            LocationId = 17
                        },
                        new
                        {
                            FishLocationId = 66,
                            FishId = 39,
                            LocationId = 12
                        },
                        new
                        {
                            FishLocationId = 67,
                            FishId = 39,
                            LocationId = 13
                        },
                        new
                        {
                            FishLocationId = 68,
                            FishId = 40,
                            LocationId = 12
                        },
                        new
                        {
                            FishLocationId = 69,
                            FishId = 40,
                            LocationId = 13
                        },
                        new
                        {
                            FishLocationId = 70,
                            FishId = 19,
                            LocationId = 3
                        },
                        new
                        {
                            FishLocationId = 71,
                            FishId = 41,
                            LocationId = 19
                        },
                        new
                        {
                            FishLocationId = 72,
                            FishId = 41,
                            LocationId = 16
                        },
                        new
                        {
                            FishLocationId = 73,
                            FishId = 41,
                            LocationId = 17
                        },
                        new
                        {
                            FishLocationId = 74,
                            FishId = 20,
                            LocationId = 8
                        },
                        new
                        {
                            FishLocationId = 75,
                            FishId = 20,
                            LocationId = 12
                        },
                        new
                        {
                            FishLocationId = 76,
                            FishId = 20,
                            LocationId = 13
                        },
                        new
                        {
                            FishLocationId = 77,
                            FishId = 21,
                            LocationId = 8
                        },
                        new
                        {
                            FishLocationId = 78,
                            FishId = 21,
                            LocationId = 5
                        },
                        new
                        {
                            FishLocationId = 79,
                            FishId = 22,
                            LocationId = 3
                        },
                        new
                        {
                            FishLocationId = 80,
                            FishId = 23,
                            LocationId = 7
                        },
                        new
                        {
                            FishLocationId = 81,
                            FishId = 23,
                            LocationId = 6
                        },
                        new
                        {
                            FishLocationId = 82,
                            FishId = 24,
                            LocationId = 8
                        },
                        new
                        {
                            FishLocationId = 83,
                            FishId = 24,
                            LocationId = 5
                        },
                        new
                        {
                            FishLocationId = 84,
                            FishId = 25,
                            LocationId = 6
                        },
                        new
                        {
                            FishLocationId = 85,
                            FishId = 26,
                            LocationId = 7
                        });
                });

            modelBuilder.Entity("DDVTracker.Models.GameVersion", b =>
                {
                    b.Property<int>("GameVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameVersionId"));

                    b.Property<string>("GameVersionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GameVersionId");

                    b.ToTable("GameVersion");

                    b.HasData(
                        new
                        {
                            GameVersionId = 1,
                            GameVersionName = "Base Game"
                        },
                        new
                        {
                            GameVersionId = 2,
                            GameVersionName = "A Rift In Time"
                        });
                });

            modelBuilder.Entity("DDVTracker.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<string>("Cost")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GameVersionId")
                        .HasColumnType("int");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationId");

                    b.HasIndex("GameVersionId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            LocationId = 1,
                            GameVersionId = 1,
                            LocationName = "Plaza"
                        },
                        new
                        {
                            LocationId = 2,
                            GameVersionId = 1,
                            LocationName = "Peaceful Meadow"
                        },
                        new
                        {
                            LocationId = 3,
                            Cost = "1000 Dreamlight",
                            GameVersionId = 1,
                            LocationName = "Dazzle Beach"
                        },
                        new
                        {
                            LocationId = 4,
                            Cost = "3000 Dreamlight",
                            GameVersionId = 1,
                            LocationName = "Forest of Valor"
                        },
                        new
                        {
                            LocationId = 5,
                            Cost = "5000 Dreamlight",
                            GameVersionId = 1,
                            LocationName = "Glade of Trust"
                        },
                        new
                        {
                            LocationId = 6,
                            Cost = "7000 Dreamlight",
                            GameVersionId = 1,
                            LocationName = "Sunlit Plateau"
                        },
                        new
                        {
                            LocationId = 7,
                            Cost = "10000 Dreamlight",
                            GameVersionId = 1,
                            LocationName = "Frosted Heights"
                        },
                        new
                        {
                            LocationId = 8,
                            Cost = "15000 Dreamlight",
                            GameVersionId = 1,
                            LocationName = "Forgotten Lands"
                        },
                        new
                        {
                            LocationId = 9,
                            GameVersionId = 2,
                            LocationName = "Ancient's Landing"
                        },
                        new
                        {
                            LocationId = 10,
                            GameVersionId = 2,
                            LocationName = "Glittering Dunes"
                        },
                        new
                        {
                            LocationId = 11,
                            GameVersionId = 2,
                            LocationName = "Wild Tangle"
                        },
                        new
                        {
                            LocationId = 12,
                            GameVersionId = 2,
                            LocationName = "The Docks"
                        },
                        new
                        {
                            LocationId = 13,
                            Cost = "6000 Mist",
                            GameVersionId = 2,
                            LocationName = "The Overlook"
                        },
                        new
                        {
                            LocationId = 14,
                            Cost = "10000 Mist",
                            GameVersionId = 2,
                            LocationName = "The Ruins"
                        },
                        new
                        {
                            LocationId = 15,
                            GameVersionId = 2,
                            LocationName = "The Courtyard"
                        },
                        new
                        {
                            LocationId = 16,
                            GameVersionId = 2,
                            LocationName = "The Plains"
                        },
                        new
                        {
                            LocationId = 17,
                            Cost = "4000 Mist",
                            GameVersionId = 2,
                            LocationName = "The Wastes"
                        },
                        new
                        {
                            LocationId = 18,
                            Cost = "6000 Mist",
                            GameVersionId = 2,
                            LocationName = "The Oasis"
                        },
                        new
                        {
                            LocationId = 19,
                            Cost = "10000 Mist",
                            GameVersionId = 2,
                            LocationName = "The Borderlands"
                        },
                        new
                        {
                            LocationId = 20,
                            Cost = "2000 Mist",
                            GameVersionId = 2,
                            LocationName = "The Grasslands"
                        },
                        new
                        {
                            LocationId = 21,
                            Cost = "4000 Mist",
                            GameVersionId = 2,
                            LocationName = "The Grove"
                        },
                        new
                        {
                            LocationId = 22,
                            Cost = "6000 Mist",
                            GameVersionId = 2,
                            LocationName = "The Promenade"
                        },
                        new
                        {
                            LocationId = 23,
                            Cost = "10000 Mist",
                            GameVersionId = 2,
                            LocationName = "The Lagoon"
                        },
                        new
                        {
                            LocationId = 24,
                            Cost = "12500 Dreamlight",
                            GameVersionId = 1,
                            LocationName = "Beauty and the Beast Realm"
                        },
                        new
                        {
                            LocationId = 25,
                            Cost = "4000 Dreamlight",
                            GameVersionId = 1,
                            LocationName = "Frozen Realm"
                        },
                        new
                        {
                            LocationId = 26,
                            Cost = "3000 Dreamlight",
                            GameVersionId = 1,
                            LocationName = "Moana Realm"
                        },
                        new
                        {
                            LocationId = 27,
                            Cost = "15000 Dreamlight",
                            GameVersionId = 1,
                            LocationName = "Monsters, Inc. Realm"
                        },
                        new
                        {
                            LocationId = 28,
                            Cost = "3000 Dreamlight",
                            GameVersionId = 1,
                            LocationName = "Ratatouille Realm"
                        },
                        new
                        {
                            LocationId = 29,
                            Cost = "10000 Dreamlight",
                            GameVersionId = 1,
                            LocationName = "The Lion King Realm"
                        },
                        new
                        {
                            LocationId = 30,
                            Cost = "7000 Dreamlight",
                            GameVersionId = 1,
                            LocationName = "Toy Story Realm"
                        },
                        new
                        {
                            LocationId = 31,
                            Cost = "3000 Dreamlight",
                            GameVersionId = 1,
                            LocationName = "WALL-E Realm"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DDVTracker.Models.Character", b =>
                {
                    b.HasOne("DDVTracker.Models.GameVersion", "GameVersion")
                        .WithMany("Characters")
                        .HasForeignKey("GameVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameVersion");
                });

            modelBuilder.Entity("DDVTracker.Models.Fish", b =>
                {
                    b.HasOne("DDVTracker.Models.GameVersion", "GameVersion")
                        .WithMany("Fish")
                        .HasForeignKey("GameVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameVersion");
                });

            modelBuilder.Entity("DDVTracker.Models.FishLocation", b =>
                {
                    b.HasOne("DDVTracker.Models.Fish", "Fish")
                        .WithMany("FishLocations")
                        .HasForeignKey("FishId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DDVTracker.Models.Location", "Location")
                        .WithMany("FishLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Fish");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("DDVTracker.Models.Location", b =>
                {
                    b.HasOne("DDVTracker.Models.GameVersion", "GameVersion")
                        .WithMany("Locations")
                        .HasForeignKey("GameVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameVersion");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DDVTracker.Models.Fish", b =>
                {
                    b.Navigation("FishLocations");
                });

            modelBuilder.Entity("DDVTracker.Models.GameVersion", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("Fish");

                    b.Navigation("Locations");
                });

            modelBuilder.Entity("DDVTracker.Models.Location", b =>
                {
                    b.Navigation("FishLocations");
                });
#pragma warning restore 612, 618
        }
    }
}
