// <auto-generated />
using System;
using DDVTracker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DDVTracker.Data.Migrations
{
    [DbContext(typeof(DreamlightDbContext))]
    partial class DreamlightDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DDVTracker.Models.Character", b =>
                {
                    b.Property<int>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CharacterId"));

                    b.Property<string>("AssignedSkill")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("CharacterImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("CharacterLevel")
                        .HasColumnType("int");

                    b.Property<string>("CharacterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FavoriteThing1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FavoriteThing2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FavoriteThing3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GameVersionId")
                        .HasColumnType("int");

                    b.Property<bool?>("isUnlocked")
                        .HasColumnType("bit");

                    b.HasKey("CharacterId");

                    b.HasIndex("GameVersionId");

                    b.ToTable("Characters");

                    b.HasData(
                        new
                        {
                            CharacterId = 1,
                            CharacterLevel = 1,
                            CharacterName = "Mickey Mouse",
                            GameVersionId = 1
                        },
                        new
                        {
                            CharacterId = 2,
                            CharacterLevel = 5,
                            CharacterName = "Rapunzel",
                            GameVersionId = 2
                        });
                });

            modelBuilder.Entity("DDVTracker.Models.Fish", b =>
                {
                    b.Property<int>("FishId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FishId"));

                    b.Property<byte[]>("FishImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("FishLocationId")
                        .HasColumnType("int");

                    b.Property<string>("FishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GameVersionId")
                        .HasColumnType("int");

                    b.Property<string>("RippleColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FishId");

                    b.HasIndex("GameVersionId");

                    b.ToTable("Fish");

                    b.HasData(
                        new
                        {
                            FishId = 1,
                            FishLocationId = 0,
                            FishName = "Bass",
                            GameVersionId = 1,
                            RippleColor = "white"
                        },
                        new
                        {
                            FishId = 2,
                            FishLocationId = 0,
                            FishName = "Robot Fish",
                            GameVersionId = 2,
                            RippleColor = "blue"
                        });
                });

            modelBuilder.Entity("DDVTracker.Models.FishLocation", b =>
                {
                    b.Property<int>("FishLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FishLocationId"));

                    b.Property<int>("FishId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.HasKey("FishLocationId");

                    b.HasIndex("FishId");

                    b.HasIndex("LocationId");

                    b.ToTable("FishLocations");

                    b.HasData(
                        new
                        {
                            FishLocationId = 1,
                            FishId = 1,
                            LocationId = 1
                        },
                        new
                        {
                            FishLocationId = 2,
                            FishId = 1,
                            LocationId = 1
                        },
                        new
                        {
                            FishLocationId = 3,
                            FishId = 1,
                            LocationId = 1
                        },
                        new
                        {
                            FishLocationId = 4,
                            FishId = 1,
                            LocationId = 1
                        },
                        new
                        {
                            FishLocationId = 5,
                            FishId = 2,
                            LocationId = 2
                        });
                });

            modelBuilder.Entity("DDVTracker.Models.GameVersion", b =>
                {
                    b.Property<int>("GameVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameVersionId"));

                    b.Property<string>("GameVersionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GameVersionId");

                    b.ToTable("GameVersion");

                    b.HasData(
                        new
                        {
                            GameVersionId = 1,
                            GameVersionName = "Base Game"
                        },
                        new
                        {
                            GameVersionId = 2,
                            GameVersionName = "A Rift In Time"
                        });
                });

            modelBuilder.Entity("DDVTracker.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<int>("GameVersionId")
                        .HasColumnType("int");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationId");

                    b.HasIndex("GameVersionId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            LocationId = 1,
                            GameVersionId = 1,
                            LocationName = "Plaza"
                        },
                        new
                        {
                            LocationId = 2,
                            GameVersionId = 1,
                            LocationName = "Peaceful Meadow"
                        },
                        new
                        {
                            LocationId = 3,
                            GameVersionId = 1,
                            LocationName = "Forest of Valor"
                        },
                        new
                        {
                            LocationId = 4,
                            GameVersionId = 1,
                            LocationName = "Sunlit Plateau"
                        },
                        new
                        {
                            LocationId = 5,
                            GameVersionId = 2,
                            LocationName = "The Oasis"
                        },
                        new
                        {
                            LocationId = 6,
                            GameVersionId = 2,
                            LocationName = "The Grasslands"
                        },
                        new
                        {
                            LocationId = 7,
                            GameVersionId = 2,
                            LocationName = "The Promenade"
                        },
                        new
                        {
                            LocationId = 8,
                            GameVersionId = 2,
                            LocationName = "The Docks"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DDVTracker.Models.Character", b =>
                {
                    b.HasOne("DDVTracker.Models.GameVersion", "GameVersion")
                        .WithMany("Characters")
                        .HasForeignKey("GameVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameVersion");
                });

            modelBuilder.Entity("DDVTracker.Models.Fish", b =>
                {
                    b.HasOne("DDVTracker.Models.GameVersion", "GameVersion")
                        .WithMany("Fish")
                        .HasForeignKey("GameVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameVersion");
                });

            modelBuilder.Entity("DDVTracker.Models.FishLocation", b =>
                {
                    b.HasOne("DDVTracker.Models.Fish", "Fish")
                        .WithMany("FishLocations")
                        .HasForeignKey("FishId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DDVTracker.Models.Location", "Location")
                        .WithMany("FishLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fish");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("DDVTracker.Models.Location", b =>
                {
                    b.HasOne("DDVTracker.Models.GameVersion", "GameVersion")
                        .WithMany()
                        .HasForeignKey("GameVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameVersion");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DDVTracker.Models.Fish", b =>
                {
                    b.Navigation("FishLocations");
                });

            modelBuilder.Entity("DDVTracker.Models.GameVersion", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("Fish");
                });

            modelBuilder.Entity("DDVTracker.Models.Location", b =>
                {
                    b.Navigation("FishLocations");
                });
#pragma warning restore 612, 618
        }
    }
}
