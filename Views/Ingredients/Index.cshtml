@model IEnumerable<DDVTracker.Models.Ingredient>
@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager

@{
    ViewData["Title"] = "Ingredients";
}

<h1>Ingredients</h1>
@{
    // Only show the create button if the user is signed in and is not a regular user
    if (SignInManager.IsSignedIn(User) && !User.IsInRole(IdentityHelper.User))
    {
        <p>
            <a asp-action="Create" class="btn btn-success">Create New</a>
        </p>
    }
}
<table id="modelDisplay" class="table">
    <thead>
        <tr>
            <th>Game Version</th>
            <th>Name</th>
            <th>Category</th>
            <th>Buy</th>
            <th>Sell</th>
            <th>Energy</th>
            <th>Grow Time</th>
            <th>Watering</th>
            <th>Yields</th>
            <th>Acquired By</th>
            <th>@Html.DisplayNameFor(model => model.Notes)</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>@Html.DisplayFor(modelItem => item.GameVersion.GameVersionName)</td>
                <td>@Html.DisplayFor(modelItem => item.IngredientName)</td>
                <td>@Html.DisplayFor(modelItem => item.IngredientCategory)</td>
                <td>@Html.DisplayFor(modelItem => item.BuyPrice)</td>
                <td>@Html.DisplayFor(modelItem => item.SellsFor)</td>
                <td>@Html.DisplayFor(modelItem => item.Energy)</td>
                <td>@Html.DisplayFor(modelItem => item.GrowTime)</td>
                <td>@Html.DisplayFor(modelItem => item.Water)</td>
                <td>@Html.DisplayFor(modelItem => item.Yield)</td>
                <td>@Html.DisplayFor(modelItem => item.Method)</td>
                <td>@Html.DisplayFor(modelItem => item.Notes)</td>
                <td>
                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#detailsModal" data-ingredientid="@item.IngredientId">
                        Details
                    </button>
                    @{
                        // Only show the edit and delete buttons if the user is signed in and is not a regular user
                        if (SignInManager.IsSignedIn(User) && !User.IsInRole(IdentityHelper.User))
                        {
                            <a asp-action="Edit" asp-route-id="@item.IngredientId" class="btn btn-primary">Edit</a>
                            <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteModal" data-ingredientid="@item.IngredientId">
                                Delete
                            </button>
                        }
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Details Modal Structure -->
<div class="modal fade" id="detailsModal" tabindex="-1" aria-labelledby="detailsModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="detailsModalLabel">Ingredient Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Dynamic content will be loaded here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Modal Structure -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Delete Ingredient</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Dynamic content will be loaded here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        var detailsModal = document.getElementById('detailsModal');
        detailsModal.addEventListener('show.bs.modal', function (event) {
            var button = event.relatedTarget;
            var ingredientId = button.getAttribute('data-ingredientid');
            var modalTitle = detailsModal.querySelector('.modal-title');
            var modalBody = detailsModal.querySelector('.modal-body');

            // Update the modal's content.
            modalTitle.textContent = 'Ingredient Details';
            modalBody.textContent = 'Loading...';

            // AJAX call with Fetch API to get ingredient details
            fetch(`/Ingredients/Details/${ingredientId}`)
                .then(response => response.text())
                .then(html => {
                    modalBody.innerHTML = html;
                })
                .catch(error => {
                    modalBody.textContent = 'An error occurred. Please try again.';
                });
        });

        var deleteModal = document.getElementById('deleteModal');
        deleteModal.addEventListener('show.bs.modal', function (event) {
            var button = event.relatedTarget;
            var ingredientId = button.getAttribute('data-ingredientid');
            var modalTitle = deleteModal.querySelector('.modal-title');
            var modalBody = deleteModal.querySelector('.modal-body');

            // Update the modal's content.
            modalTitle.textContent = 'Delete Ingredient';
            modalBody.textContent = 'Loading...';

            fetch(`/Ingredient/Delete/${ingredientId}`)
                .then(response => response.text())
                .then(html => {
                    modalBody.innerHTML = html;
                })
                .catch(error => {
                    modalBody.textContent = 'An error occurred. Please try again.';
                });
        });
    });
</script>